AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bug-sales-processor

  Lambda the handle bug sales process
Parameters:
  Env: string

Resources:
  # IAM
  BugSalesProcessorLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-bug-sales-processdor-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: MyLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref BugSalesProcessorLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BugSalesProcessorApiGateway}/${Env}/*'

  LambdaInvokePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${Env}-bug-sales-lambda-invoke-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BugSalesProcessorLambda}'
        Roles:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${Env}-bug-sales-processdor-lambda-role'

  LambdaInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-bug-sales-lambda-invoke-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${Env}-bug-sales-lambda-invoke-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BugSalesProcessorLambda}'

  # LAMBDA
  BugSalesProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${Env}-bug-sales-processdor-lambda-role'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts
  
  # API GATEWAY
  BugSalesProcessorApiGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref Env
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Bug Sales Processor API Gateway
        paths:
          /sales:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BugSalesProcessorLambda.Arn}/invocations'
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  description: '200 response'
              produces:
                - 'application/json'
            x-amazon-apigateway-any-method:
              responses: {}
              security:
                - lambda_invoke_permission: []
          /sales/{proxy+}:
            x-amazon-apigateway-any-method:
              responses: {}
              security:
                - lambda_invoke_permission: []
